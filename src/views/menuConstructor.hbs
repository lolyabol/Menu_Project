<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Конструктор меню</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Nunito', sans-serif;
            background-color: #25883e;
            margin: 0;
            padding: 20px;
        }
        #app {
            margin-top: 10%;
            max-width: 800px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow:
                0 16px 40px rgba(0, 0, 0, 0.1),
                0 4px 10px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
        }
        h1 {
            text-align: center;
        }
        #ingredients-container {
            padding-top: 5%;
            padding-bottom: 2%;
            height: 60vh;
            overflow-y: auto;
            background-color: rgb(255, 255, 255);
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 20px;
        }

        #ingredients-container::-webkit-scrollbar {
            display: none;
        }

        #ingredients-container {
            -ms-overflow-style: none; 
            scrollbar-width: none;   
        }

        #dishes-container {
        margin-top: 5%;
        padding: 5%;
        border-radius: 15px;
        background-color: #18811b;
        display: none; 
        flex-wrap: wrap;
        gap: 20px; 
        }
        .ingredient-card,
        .dish-card {
            padding: 20px;
            width: calc(32% - 1%); 
            box-sizing: border-box; 
            background: rgb(194, 194, 194);
            border-radius: 15px;
            box-shadow:
                0 8px 20px rgba(0, 0, 0, 0.1),
                0 4px 10px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
        }
        .dish-card img {
            width: 100%;
            height: 150px; 
            border-radius: 10px; 
        }
        
        .ingredient-card img {
            width: 100%;
            height: 150px; 
            border-radius: 10px; 
        }
        .ingredient-card label {
            font-weight: bold;
        }
        .ingredient-card.selected {
            border: 2px solid #28b32d; 
        }
        button {
            display: block;
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background-color: #28b32d; 
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
           background-color: #18811b; 
       }
       label {
           font-size:18px; 
           margin-top :2%; 
           margin-bottom :10 px; 
           display:block; 
       }
       #meal-type { 
           width :200 px ; 
           padding :10 px ; 
           border :2 px solid #4CAF50 ; 
           border-radius :5 px ; 
           background-color :#fff ; 
           font-size :16 px ; 
           transition :background-color .3 s , border-color .3 s ; 
       }  
       #meal-type :focus {  
           outline :none ;  
           background-color :#e8f5e9 ;  
           border-color :#66bb6a ;  
       }  
   </style>
</head>
<body>
   <div id="app">
       <h1>Конструктор меню</h1>

       <div id="ingredients-container">
           {{#each ingredients}}
               <div class="ingredient-card" onclick="toggleIngredient(this)">
                   <label>{{this.name}}</label>
                   <p>Калории: {{this.calories}}</p>
                   <img src="{{this.imageURL}}" alt="{{this.name}}" />
                   <input type="checkbox" onchange="toggleSelection(this)" value="{{this._id}}" style="display:none;">
               </div>
           {{/each}}
       </div>

       <label for="meal-type">Выберите тип блюда:</label>
       <select id="meal-type">
           <option value="">Все</option>
           <option value="breakfast">breakfast</option>
           <option value="lunch">lunch</option>
           <option value="dinner">dinner</option>
       </select>

       <button id="fetch-dishes">Показать блюда</button>

       <div id="dishes-container"></div>
   </div>

   <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>
   <script>
       const selectedIngredients = [];
       let selectedMealType = '';

       function toggleIngredient(card) {
           const checkbox = card.querySelector('input[type="checkbox"]');
           checkbox.checked = !checkbox.checked;
           toggleSelection(checkbox);
           card.classList.toggle('selected');
       }

       function toggleSelection(checkbox) {
           const ingredientId = checkbox.value;

           if (checkbox.checked) {
               if (!selectedIngredients.includes(ingredientId)) {
                   selectedIngredients.push(ingredientId);
               }
           } else {
               const index = selectedIngredients.indexOf(ingredientId);
               if (index > -1) {
                   selectedIngredients.splice(index, 1);
               }
           }
       }

       async function fetchDishes() {
          if (selectedIngredients.length === 0) {
              alert('Пожалуйста, выберите хотя бы один ингредиент.');
              return;
          }

          selectedMealType = document.getElementById('meal-type').value;

          try {
              const response = await fetch('/dishes/filter', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                      ingredients:selectedIngredients,
                      mealType:selectedMealType,
                  }),
              });

              if (!response.ok) {
                  throw new Error('Ошибка при получении блюд');
              }

              const dishes = await response.json();
              displayDishes(dishes);
          } catch (error) {
              console.error('Ошибка:', error);
          }
      }

      function displayDishes(dishes) {
    const dishesContainer = document.getElementById('dishes-container');
    dishesContainer.innerHTML = '';

    if (dishes.length === 0) { 
        dishesContainer.innerHTML = 'Нет блюд для выбранных ингредиентов.'; 
        return; 
    } 

    dishesContainer.style.display = 'flex'; 

    console.log('Полученные блюда:', dishes); 

    dishes.forEach(dish => { 
        const card = document.createElement('div'); 
        card.className = 'dish-card'; 

        const collapsedView = document.createElement('div');
        
        const mealTypeText = dish.mealType ? dish.mealType.charAt(0).toUpperCase() + dish.mealType.slice(1) : 'Неизвестный тип';
        
        collapsedView.innerHTML =
            `<img src="${dish.imageURL}" alt="${dish.name}"" />  
            <h3>${dish.name}</h3>
            <p>Тип блюда: ${mealTypeText}</p>`; 

        collapsedView.style.cursor = "pointer"; 

        const detailsDiv = document.createElement('div');
        detailsDiv.className = 'dish-details';
        detailsDiv.style.display = 'none'; 
        
         detailsDiv.innerHTML =
`<img src="${dish.imageURL}" alt="${dish.name}"" />
<p>Калории: ${dish.calories}</p>  
<p>${dish.description || 'Описание отсутствует.'}</p>  
<h4>Рецепт:</h4>  
<p>${dish.recipe}</p>  
<h4>Ингредиенты:</h4>
<p>${Array.isArray(dish.ingredientsList) && dish.ingredientsList.length > 0 
    ? dish.ingredientsList.map(item => `${item.quantity}г. ингредиента "${item.ingredientId.name}"`).join('<br>')
    : 'Ингредиенты отсутствуют.'}</p>`; 

        const addButton = document.createElement('button');
        addButton.textContent = 'Добавить';
        addButton.onclick = async function(event) { 
            event.stopPropagation(); 
            await addDishToMenu(dish._id); 
        };

        card.onclick = function() {
            if (detailsDiv.style.display === 'none') { 
                detailsDiv.style.display = 'block'; 
                collapsedView.style.display = 'none'; 
            } else { 
                detailsDiv.style.display = 'none'; 
                collapsedView.style.display = 'block'; 
            }
        };

        card.appendChild(collapsedView); 
        card.appendChild(detailsDiv); 
        card.appendChild(addButton); 

        dishesContainer.appendChild(card); 
    }); 
}
      async function addDishToMenu(dishId) { 
    try {
        const response = await fetch('/menu/addMenu', { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ dishId }) 
        });

        if (!response.ok) throw new Error(`Ошибка при добавлении блюда в меню: ${response.statusText}`);

        const data = await response.json();
        alert(data.message); 
    } catch (error) {
        console.error("Ошибка:", error);
        alert("Не удалось добавить блюдо в меню.");
    }
}

      document.getElementById('fetch-dishes').addEventListener('click', fetchDishes);
      document.getElementById('meal-type').addEventListener('change', fetchDishes);
   </script>
</body>
</html>